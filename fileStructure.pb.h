// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fileStructure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fileStructure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fileStructure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fileStructure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fileStructure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fileStructure_2eproto;
namespace FILE_STORAGE {
class ConfigPacket;
class ConfigPacketDefaultTypeInternal;
extern ConfigPacketDefaultTypeInternal _ConfigPacket_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
}  // namespace FILE_STORAGE
PROTOBUF_NAMESPACE_OPEN
template<> ::FILE_STORAGE::ConfigPacket* Arena::CreateMaybeMessage<::FILE_STORAGE::ConfigPacket>(Arena*);
template<> ::FILE_STORAGE::Packet* Arena::CreateMaybeMessage<::FILE_STORAGE::Packet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FILE_STORAGE {

enum FileType : int {
  FILE = 0,
  DIRECTORY = 1,
  FileType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FileType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FileType_IsValid(int value);
constexpr FileType FileType_MIN = FILE;
constexpr FileType FileType_MAX = DIRECTORY;
constexpr int FileType_ARRAYSIZE = FileType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileType_descriptor();
template<typename T>
inline const std::string& FileType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileType_descriptor(), enum_t_value);
}
inline bool FileType_Parse(
    const std::string& name, FileType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileType>(
    FileType_descriptor(), name, value);
}
// ===================================================================

class ConfigPacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FILE_STORAGE.ConfigPacket) */ {
 public:
  inline ConfigPacket() : ConfigPacket(nullptr) {};
  virtual ~ConfigPacket();

  ConfigPacket(const ConfigPacket& from);
  ConfigPacket(ConfigPacket&& from) noexcept
    : ConfigPacket() {
    *this = ::std::move(from);
  }

  inline ConfigPacket& operator=(const ConfigPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigPacket& operator=(ConfigPacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigPacket* internal_default_instance() {
    return reinterpret_cast<const ConfigPacket*>(
               &_ConfigPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigPacket& a, ConfigPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigPacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigPacket* New() const final {
    return CreateMaybeMessage<ConfigPacket>(nullptr);
  }

  ConfigPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigPacket& from);
  void MergeFrom(const ConfigPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FILE_STORAGE.ConfigPacket";
  }
  protected:
  explicit ConfigPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fileStructure_2eproto);
    return ::descriptor_table_fileStructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
    kChunkSizeFieldNumber = 4,
    kChunksFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .FILE_STORAGE.FileType type = 1;
  void clear_type();
  ::FILE_STORAGE::FileType type() const;
  void set_type(::FILE_STORAGE::FileType value);
  private:
  ::FILE_STORAGE::FileType _internal_type() const;
  void _internal_set_type(::FILE_STORAGE::FileType value);
  public:

  // uint32 chunk_size = 4;
  void clear_chunk_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_size() const;
  void set_chunk_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chunk_size() const;
  void _internal_set_chunk_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 chunks = 3;
  void clear_chunks();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks() const;
  void set_chunks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chunks() const;
  void _internal_set_chunks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:FILE_STORAGE.ConfigPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fileStructure_2eproto;
};
// -------------------------------------------------------------------

class Packet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FILE_STORAGE.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {};
  virtual ~Packet();

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FILE_STORAGE.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fileStructure_2eproto);
    return ::descriptor_table_fileStructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileContentFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string file_content = 2;
  void clear_file_content();
  const std::string& file_content() const;
  void set_file_content(const std::string& value);
  void set_file_content(std::string&& value);
  void set_file_content(const char* value);
  void set_file_content(const char* value, size_t size);
  std::string* mutable_file_content();
  std::string* release_file_content();
  void set_allocated_file_content(std::string* file_content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file_content(
      std::string* file_content);
  private:
  const std::string& _internal_file_content() const;
  void _internal_set_file_content(const std::string& value);
  std::string* _internal_mutable_file_content();
  public:

  // fixed32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FILE_STORAGE.Packet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_content_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fileStructure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigPacket

// .FILE_STORAGE.FileType type = 1;
inline void ConfigPacket::clear_type() {
  type_ = 0;
}
inline ::FILE_STORAGE::FileType ConfigPacket::_internal_type() const {
  return static_cast< ::FILE_STORAGE::FileType >(type_);
}
inline ::FILE_STORAGE::FileType ConfigPacket::type() const {
  // @@protoc_insertion_point(field_get:FILE_STORAGE.ConfigPacket.type)
  return _internal_type();
}
inline void ConfigPacket::_internal_set_type(::FILE_STORAGE::FileType value) {
  
  type_ = value;
}
inline void ConfigPacket::set_type(::FILE_STORAGE::FileType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:FILE_STORAGE.ConfigPacket.type)
}

// string name = 2;
inline void ConfigPacket::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfigPacket::name() const {
  // @@protoc_insertion_point(field_get:FILE_STORAGE.ConfigPacket.name)
  return _internal_name();
}
inline void ConfigPacket::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:FILE_STORAGE.ConfigPacket.name)
}
inline std::string* ConfigPacket::mutable_name() {
  // @@protoc_insertion_point(field_mutable:FILE_STORAGE.ConfigPacket.name)
  return _internal_mutable_name();
}
inline const std::string& ConfigPacket::_internal_name() const {
  return name_.Get();
}
inline void ConfigPacket::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigPacket::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FILE_STORAGE.ConfigPacket.name)
}
inline void ConfigPacket::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FILE_STORAGE.ConfigPacket.name)
}
inline void ConfigPacket::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FILE_STORAGE.ConfigPacket.name)
}
inline std::string* ConfigPacket::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigPacket::release_name() {
  // @@protoc_insertion_point(field_release:FILE_STORAGE.ConfigPacket.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FILE_STORAGE.ConfigPacket.name)
}
inline std::string* ConfigPacket::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FILE_STORAGE.ConfigPacket.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfigPacket::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FILE_STORAGE.ConfigPacket.name)
}

// uint64 chunks = 3;
inline void ConfigPacket::clear_chunks() {
  chunks_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfigPacket::_internal_chunks() const {
  return chunks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfigPacket::chunks() const {
  // @@protoc_insertion_point(field_get:FILE_STORAGE.ConfigPacket.chunks)
  return _internal_chunks();
}
inline void ConfigPacket::_internal_set_chunks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chunks_ = value;
}
inline void ConfigPacket::set_chunks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chunks(value);
  // @@protoc_insertion_point(field_set:FILE_STORAGE.ConfigPacket.chunks)
}

// uint32 chunk_size = 4;
inline void ConfigPacket::clear_chunk_size() {
  chunk_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConfigPacket::_internal_chunk_size() const {
  return chunk_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConfigPacket::chunk_size() const {
  // @@protoc_insertion_point(field_get:FILE_STORAGE.ConfigPacket.chunk_size)
  return _internal_chunk_size();
}
inline void ConfigPacket::_internal_set_chunk_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chunk_size_ = value;
}
inline void ConfigPacket::set_chunk_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chunk_size(value);
  // @@protoc_insertion_point(field_set:FILE_STORAGE.ConfigPacket.chunk_size)
}

// -------------------------------------------------------------------

// Packet

// fixed32 id = 1;
inline void Packet::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::id() const {
  // @@protoc_insertion_point(field_get:FILE_STORAGE.Packet.id)
  return _internal_id();
}
inline void Packet::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Packet::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:FILE_STORAGE.Packet.id)
}

// string file_content = 2;
inline void Packet::clear_file_content() {
  file_content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Packet::file_content() const {
  // @@protoc_insertion_point(field_get:FILE_STORAGE.Packet.file_content)
  return _internal_file_content();
}
inline void Packet::set_file_content(const std::string& value) {
  _internal_set_file_content(value);
  // @@protoc_insertion_point(field_set:FILE_STORAGE.Packet.file_content)
}
inline std::string* Packet::mutable_file_content() {
  // @@protoc_insertion_point(field_mutable:FILE_STORAGE.Packet.file_content)
  return _internal_mutable_file_content();
}
inline const std::string& Packet::_internal_file_content() const {
  return file_content_.Get();
}
inline void Packet::_internal_set_file_content(const std::string& value) {
  
  file_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Packet::set_file_content(std::string&& value) {
  
  file_content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FILE_STORAGE.Packet.file_content)
}
inline void Packet::set_file_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FILE_STORAGE.Packet.file_content)
}
inline void Packet::set_file_content(const char* value,
    size_t size) {
  
  file_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FILE_STORAGE.Packet.file_content)
}
inline std::string* Packet::_internal_mutable_file_content() {
  
  return file_content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Packet::release_file_content() {
  // @@protoc_insertion_point(field_release:FILE_STORAGE.Packet.file_content)
  return file_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Packet::set_allocated_file_content(std::string* file_content) {
  if (file_content != nullptr) {
    
  } else {
    
  }
  file_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FILE_STORAGE.Packet.file_content)
}
inline std::string* Packet::unsafe_arena_release_file_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FILE_STORAGE.Packet.file_content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return file_content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Packet::unsafe_arena_set_allocated_file_content(
    std::string* file_content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file_content != nullptr) {
    
  } else {
    
  }
  file_content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file_content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FILE_STORAGE.Packet.file_content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FILE_STORAGE

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::FILE_STORAGE::FileType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FILE_STORAGE::FileType>() {
  return ::FILE_STORAGE::FileType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fileStructure_2eproto
